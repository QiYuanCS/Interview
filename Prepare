C语言实现：有一个指针指向字符串首地址，字符串由一堆数字组成，数字之间用逗号隔开，用一种最快的方法将最大的数与第一个数交换，最小的数与最后一个数交换。（注意数字可能不止一位）

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Function to swap two integers
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to find the maximum and minimum in an array and swap values
void processString(char *str) {
    int numbers[100]; // Assuming the string has at most 100 numbers
    int count = 0;    // Count of numbers in the array
    
    // Parse the string into numbers
    char *token = strtok(str, ",");
    while (token != NULL) {
        numbers[count++] = atoi(token); // Convert string to integer
        token = strtok(NULL, ",");
    }

    // Find the indices of the maximum and minimum values
    int maxIdx = 0, minIdx = 0;
    for (int i = 1; i < count; i++) {
        if (numbers[i] > numbers[maxIdx]) {
            maxIdx = i;
        }
        if (numbers[i] < numbers[minIdx]) {
            minIdx = i;
        }
    }

    // Swap the maximum with the first element
    if (maxIdx != 0) {
        swap(&numbers[0], &numbers[maxIdx]);
    }

    // Swap the minimum with the last element
    if (minIdx != count - 1) {
        swap(&numbers[count - 1], &numbers[minIdx]);
    }

    // Reconstruct the string
    printf("Processed string: ");
    for (int i = 0; i < count; i++) {
        if (i > 0) {
            printf(",");
        }
        printf("%d", numbers[i]);
    }
    printf("\n");
}

// Main function to test the implementation
int main() {
    char input[] = "3,5,1,9,2"; // Example input
    printf("Original string: %s\n", input);

    processString(input);

    return 0;
}



找出二维数组中的最大数并输出，使用指针运算。并指出第6个数是什么。

#include <stdio.h>

void findMaxAndSixth(int rows, int cols, int arr[rows][cols]) {
    int *ptr = &arr[0][0]; // 指向数组首地址
    int max = *ptr;        // 初始化最大值为第一个数
    int sixthNumber = 0;   // 存储第 6 个数
    int totalElements = rows * cols;

    // 遍历数组
    for (int i = 0; i < totalElements; i++) {
        if (*(ptr + i) > max) {
            max = *(ptr + i); // 更新最大值
        }
        // 如果是第 6 个数
        if (i == 5) {
            sixthNumber = *(ptr + i);
        }
    }

    // 输出结果
    printf("The maximum number in the array is: %d\n", max);
    printf("The 6th number in the array is: %d\n", sixthNumber);
}

int main() {
    // 定义一个示例二维数组
    int array[3][4] = {
        {3, 8, 12, 7},
        {5, 15, 20, 11},
        {6, 13, 10, 9}
    };

    // 输出数组
    printf("Array:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }

    // 调用函数
    findMaxAndSixth(3, 4, array);

    return 0;
}

#include <stdio.h>

void findMaxAndSixth(int rows, int cols, int (*arr)[cols]) {
    int max = **arr;      // 初始化最大值为数组第一个元素
    int sixthNumber = 0;  // 第 6 个数存储
    int count = 0;        // 元素计数器

    // 遍历二维数组
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            int *current = *(arr + i) + j; // 获取当前元素指针
            if (*current > max) {
                max = *current; // 更新最大值
            }
            count++;
            if (count == 6) {
                sixthNumber = *current; // 保存第 6 个数
            }
        }
    }

    // 输出结果
    printf("The maximum number in the array is: %d\n", max);
    printf("The 6th number in the array is: %d\n", sixthNumber);
}

int main() {
    // 定义一个示例二维数组
    int array[3][4] = {
        {3, 8, 12, 7},
        {5, 15, 20, 11},
        {6, 13, 10, 9}
    };

    // 输出数组
    printf("Array:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }

    // 调用函数
    findMaxAndSixth(3, 4, array);

    return 0;
}


